i2c:
  sda: GPIO36
  scl: GPIO35
  scan: true
  id: bus_a

spi:
  clk_pin: GPIO7
  mosi_pin: GPIO6

output:
  - platform: ledc
    pin: GPIO39
    id: white_led_pwm
    inverted: true

  - platform: ledc
    pin: GPIO37
    id: fan_pwm
    inverted: true

  - platform: ledc
    pin: GPIO47
    id: rtttl_out

rtttl:
  output: rtttl_out
  id: buzzer

light:
  - platform: monochromatic
    output: white_led_pwm
    id: white_led
    web_server:
      sorting_group_id: grp_hidden
      
  - platform: esp32_rmt_led_strip
    id: rgb_led_strip
    pin: GPIO42
    num_leds: 16
    rmt_channel: 0
    chipset: ws2812
    rgb_order: RGB
    web_server:
      sorting_group_id: grp_hidden

switch:
  - platform: template
    id: humidifier_fan
    optimistic: true
    turn_on_action:
      - lambda: |-
          uint8_t data[2] = {0x00, 0x01};
          id(bus_a).write(0x6C, data, 2);
          ESP_LOGI("humidifier", "TURN ON: sent [0x00,0x01] to 0x6C, ok=%d");
    turn_off_action:
      - lambda: |-
          uint8_t data[2] = {0x00, 0x00};
          id(bus_a).write(0x6C, data, 2);
          ESP_LOGI("humidifier", "TURN OFF: sent [0x00,0x00] to 0x6C, ok=%d");
    web_server:
      sorting_group_id: grp_hidden

  - platform: factory_reset
    id: do_factory_reset
    internal: true
    name: "Restart with Factory Default Settings"
    web_server:
      sorting_group_id: grp_hidden


fan:
  - platform: speed
    output: fan_pwm
    id: air_exchange_fan
    internal: true
    speed_count: 100
    web_server:
      sorting_group_id: grp_hidden

sensor:
  #=======================================================================
  # SECTION 1: Internal High-Frequency Sensors
  # These publish their raw values every second to the public template sensors.
  #=======================================================================

  - platform: sht4x
    i2c_id: bus_a
    temperature:
      id: temperature
      name: "Current Temperature"
      internal: true
      web_server:
        sorting_group_id: grp_env
      
      on_value:
        # Every second, publish the raw value to the public template sensor.
        - sensor.template.publish:
            id: temp_ha
            state: !lambda 'return x;'
    humidity:
      id: humidity
      name: "Current Humidity"
      internal: true
      web_server:
        sorting_group_id: grp_env
      
      on_value:
        # First, run the local script with every new value.
        - script.execute: humidity_control_manager
        # Then, publish the raw value to the public template sensor.
        - sensor.template.publish:
            id: humidity_ha
            state: !lambda 'return x;'
    update_interval: 1s

  - platform: pulse_counter
    pin: GPIO14
    id: fan_tach_internal
    name: "Current Air Exchange Fan Speed"
    internal: true
    unit_of_measurement: "RPM"
    accuracy_decimals: 0
    web_server:
      sorting_group_id: grp_env          
    filters:
      - multiply: 0.5
    update_interval: 1s
    on_value:
      # Every second, publish the raw value to the public template sensor.
      - sensor.template.publish:
          id: fan_tach_ha
          state: !lambda 'return x;'

  #=======================================================================
  # SECTION 2: Public (Smoothed) Template Sensors for Home Assistant
  # These receive updates every second, but use FILTERS to decide when
  # to forward a new state to Home Assistant.
  #=======================================================================

  - platform: template
    name: "Temperature"
    id: temp_ha
    entity_category: "diagnostic"
    accuracy_decimals: 1
    unit_of_measurement: "°C"
    web_server:
      sorting_group_id: grp_hidden
    filters:
      - throttle: 30s

  - platform: template
    name: "Humidity"
    id: humidity_ha
    entity_category: "diagnostic"
    accuracy_decimals: 1
    unit_of_measurement: "%"
    web_server:
      sorting_group_id: grp_hidden
    filters:
      - throttle: 30s

  - platform: template
    name: "Air Exchange Fan Speed"
    id: fan_tach_ha
    entity_category: "diagnostic"
    unit_of_measurement: "RPM"
    accuracy_decimals: 0
    web_server:
      sorting_group_id: grp_hidden
      sorting_weight: 40
    filters:
      - delta: 25.0

font:
  - file: 'fonts/spleen-6x12.bdf'
    id: font1 

image:
  - file: "images/background.bmp"
    id: background
    type: BINARY
    
display:
  - platform: waveshare_epaper
    id: my_display
    cs_pin: GPIO8
    dc_pin: GPIO48
    busy_pin: GPIO38
    reset_pin: GPIO21
    rotation: 90°
    model: 2.90inv2-r2
    full_update_every: 3600
    update_interval: 60s
    auto_clear_enabled: false
    lambda: |-
      // Set up previous WiFi state variables to track state across refreshes
      static bool has_drawn_background = false;
      static String previous_ssid = "";
      static String previous_ip = "";

      // Draw static background once
      if (!has_drawn_background) {
        it.image(0, 0, id(background), COLOR_OFF, COLOR_ON);
        it.printf(135, 20, id(font1), "www.openshrooly.com");
        has_drawn_background = true;
      }

      // Get current WiFi connection state, initialize variables
      bool current_wifi_connected = WiFi.isConnected();
      String current_ssid = "";
      String current_ip = "";

      if (current_wifi_connected) {
        current_ssid = WiFi.SSID();
        current_ip = WiFi.localIP().toString();
      } else {
        current_ssid = "OpenShrooly";
        current_ip = "Waiting to be configured";
      }

      // Update SSID display if it has changed
      if (previous_ssid != current_ssid) {
        it.filled_rectangle(135, 32, 160, 12, COLOR_OFF);
        it.printf(135, 32, id(font1), COLOR_ON, "SSID: %s", current_ssid.c_str());
      }

      // Update local IP display if it has changed
      if (previous_ip != current_ip) {
        it.filled_rectangle(135, 44, 160, 12, COLOR_OFF);
        it.printf(135, 44, id(font1),  COLOR_ON, "IP: %s", current_ip.c_str());
      }

      // Update WiFi state variables
      previous_ssid = current_ssid;
      previous_ip = current_ip;

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO5
      mode: INPUT_PULLUP
      inverted: true
    name: "Reset button"
    web_server:
      sorting_group_id: grp_hidden
    on_click:
      - min_length: 5s
        max_length: 60s
        then:
          - rtttl.play: "beep:d=4,o=5,b=120:16a"          
          - lambda: |-
              
              id(my_display).fill(COLOR_OFF);
              id(my_display).print(30, 60, id(font1), "Factory Reset...");
              id(my_display).print(30, 80, id(font1), "Please wait...");
              id(my_display).update();              
          - delay: 2s
          - switch.turn_on: do_factory_reset